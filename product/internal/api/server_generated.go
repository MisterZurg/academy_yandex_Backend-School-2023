// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /couriers)
	GetCouriers(ctx echo.Context, params GetCouriersParams) error

	// (POST /couriers)
	CreateCourier(ctx echo.Context) error
	// Список распределенных заказов
	// (GET /couriers/assignments)
	CouriersAssignments(ctx echo.Context, params CouriersAssignmentsParams) error

	// (GET /couriers/meta-info/{courier_id})
	GetCourierMetaInfo(ctx echo.Context, courierId int64, params GetCourierMetaInfoParams) error

	// (GET /couriers/{courier_id})
	GetCourierById(ctx echo.Context, courierId int64) error

	// (GET /orders)
	GetOrders(ctx echo.Context, params GetOrdersParams) error

	// (POST /orders)
	CreateOrder(ctx echo.Context) error
	// Распределение заказов по курьерам
	// (POST /orders/assign)
	OrdersAssign(ctx echo.Context, params OrdersAssignParams) error

	// (POST /orders/complete)
	CompleteOrder(ctx echo.Context) error

	// (GET /orders/{order_id})
	GetOrder(ctx echo.Context, orderId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCouriers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouriers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouriersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCouriers(ctx, params)
	return err
}

// CreateCourier converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCourier(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCourier(ctx)
	return err
}

// CouriersAssignments converts echo context to params.
func (w *ServerInterfaceWrapper) CouriersAssignments(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CouriersAssignmentsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "courier_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "courier_id", ctx.QueryParams(), &params.CourierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CouriersAssignments(ctx, params)
	return err
}

// GetCourierMetaInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourierMetaInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "courier_id" -------------
	var courierId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "courier_id", runtime.ParamLocationPath, ctx.Param("courier_id"), &courierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courier_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCourierMetaInfoParams
	// ------------- Required query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Required query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCourierMetaInfo(ctx, courierId, params)
	return err
}

// GetCourierById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourierById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "courier_id" -------------
	var courierId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "courier_id", runtime.ParamLocationPath, ctx.Param("courier_id"), &courierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCourierById(ctx, courierId)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrders(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// OrdersAssign converts echo context to params.
func (w *ServerInterfaceWrapper) OrdersAssign(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OrdersAssignParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrdersAssign(ctx, params)
	return err
}

// CompleteOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CompleteOrder(ctx)
	return err
}

// GetOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrder(ctx, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/couriers", wrapper.GetCouriers)
	router.POST(baseURL+"/couriers", wrapper.CreateCourier)
	router.GET(baseURL+"/couriers/assignments", wrapper.CouriersAssignments)
	router.GET(baseURL+"/couriers/meta-info/:courier_id", wrapper.GetCourierMetaInfo)
	router.GET(baseURL+"/couriers/:courier_id", wrapper.GetCourierById)
	router.GET(baseURL+"/orders", wrapper.GetOrders)
	router.POST(baseURL+"/orders", wrapper.CreateOrder)
	router.POST(baseURL+"/orders/assign", wrapper.OrdersAssign)
	router.POST(baseURL+"/orders/complete", wrapper.CompleteOrder)
	router.GET(baseURL+"/orders/:order_id", wrapper.GetOrder)

}
